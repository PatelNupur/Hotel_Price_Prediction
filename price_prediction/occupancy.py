# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ITVF1_cTqceYsV_bR3b-lJGK3d6PiMy5
"""

# Data processing
import numpy as np
import pickle
import pandas as pd  # data processing, CSV file I/O (e.g. pd.read_csv)
import warnings
import matplotlib.pyplot as plt
from prophet import Prophet

df = pd.read_csv("C:/Users/nupur/OneDrive/Desktop/SPM/5 Years Data/5 Years Data/Data.csv")

df.drop(['Event', 'Room_sold_group',
         'Rooms_sold_transient', 'Revenue', 'RevPAR', 'ADR', 'week_number',
         'week_sin', 'week_cos', 'Month', 'Month_sin', 'Month_cos', 'Day',
         'Day_sin', 'Day_cos', 'Unnamed: 0'], axis=1, inplace=True)

df.rename(columns={'Occupancy_Date': 'ds', 'Occupancy': 'y', }, inplace=True)

df.columns = ['ds', 'y']

df['ds'] = pd.to_datetime(df['ds'])

# Train test split
df_train = df[df['ds'] <= '2022-06-30']
df_test = df[df['ds'] > '2022-06-30']

# Create the prophet model with confidence internal of 95%
m = Prophet(interval_width=0.95, n_changepoints=7)

# Fit the model using the training dataset
m.fit(df_train)

m = Prophet()
df.columns = ['ds', 'y']

model = m.fit(df)

future = m.make_future_dataframe(periods=60, freq='D')
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(10)

fig1 = m.plot(forecast)  # linear algebra

warnings.filterwarnings("ignore")
plt.style.use('fivethirtyeight')

end_date = '2022-06-30'
mask1 = (df['ds'] <= end_date)
mask2 = (df['ds'] > end_date)

X_tr = df.loc[mask1]
X_tst = df.loc[mask2]
# print("train shape", X_tr.shape)
# print("test shape", X_tst.shape)

X_tst_forecast = model.predict(X_tst)
X_tst_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(7)

f, ax = plt.subplots(1)
f.set_figheight(5)
f.set_figwidth(15)
ax.scatter(X_tst.ds, X_tst['y'], color='r')
fig = model.plot(X_tst_forecast, ax=ax)


def mean_absolute_percentage_error(y_true, y_pred):
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100


mape = mean_absolute_percentage_error(X_tst['y'], X_tst_forecast['yhat'])
 # print("MAPE", round(mape, 4))

future = m.make_future_dataframe(periods=365, freq='D')
forecast = m.predict(future)
print(forecast.tail(60))

# filename = 'saved_model.sav'
# saved_model = joblib.dump(m, filename)

pickle.dump(m, open('modeloccupancy.pkl', 'wb'))
loaded_model_base = pickle.load(open('modeloccupancy.pkl', 'rb'))
